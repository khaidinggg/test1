"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint");
var CallExpressionWalker = (function (_super) {
    __extends(CallExpressionWalker, _super);
    function CallExpressionWalker(sourceFile, options, regex, failureString, ruleSeverity) {
        var _this = _super.call(this, sourceFile, options) || this;
        _this.regex = regex;
        _this.failureString = failureString;
        _this.ruleSeverity = ruleSeverity;
        return _this;
    }
    CallExpressionWalker.prototype.visitCallExpression = function (node) {
        var match = node.expression.getText().match(this.regex);
        if (match) {
            var fix = this.ruleSeverity === "error"
                ? Lint.Replacement.deleteText(node.getStart(), 1)
                : undefined;
            this.addFailureAt(node.getStart(), match[0].length, this.failureString, fix);
        }
        _super.prototype.visitCallExpression.call(this, node);
    };
    return CallExpressionWalker;
}(Lint.RuleWalker));
exports.CallExpressionWalker = CallExpressionWalker;
