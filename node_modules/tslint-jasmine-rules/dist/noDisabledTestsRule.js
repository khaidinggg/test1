"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint");
var callExpressionWalker_1 = require("./callExpressionWalker");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new callExpressionWalker_1.CallExpressionWalker(sourceFile, this.getOptions(), Rule.REGEX, Rule.FAILURE_STRING, this.ruleSeverity));
    };
    Rule.FAILURE_STRING = "Disabled test (xit or xdescribe)";
    Rule.PROHIBITED = ["xdescribe", "xit"];
    Rule.REGEX = new RegExp("^(" + Rule.PROHIBITED.join("|") + ")$");
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
