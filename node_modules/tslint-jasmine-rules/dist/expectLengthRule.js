"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint");
var tsutils = require("tsutils");
var ts = require("typescript");
function some(iterator, predicate) {
    var next;
    while (!(next = iterator.next()).done) {
        if (predicate(next.value)) {
            return true;
        }
    }
    return false;
}
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new ExpectLengthWalker(sourceFile, this.ruleName, new Set(this.ruleArguments.map(String))));
    };
    Rule.FAILURE_STRING = "Length check required (e.g. 'expect(xy.length).toBeGreaterThan(0);' )";
    Rule.ITERATOR_METHODS = ["forEach"];
    return Rule;
}(Lint.Rules.AbstractRule));
exports.Rule = Rule;
var ExpectLengthWalker = (function (_super) {
    __extends(ExpectLengthWalker, _super);
    function ExpectLengthWalker(sourceFile, ruleName, options) {
        var _this = _super.call(this, sourceFile, ruleName, options) || this;
        _this.minimalPattern = "(\/test\/)";
        _this.defaultPattern = "(\/e2e\/)|(spec\.ts$)";
        _this.fileNamePattern = new RegExp(_this.minimalPattern + "|" + _this.defaultPattern);
        _this.isInTestFile = _this.fileNamePattern.test(sourceFile.fileName);
        if (_this.isInTestFile) {
            _this.usages = tsutils.collectVariableUsage(_this.getSourceFile());
        }
        return _this;
    }
    ExpectLengthWalker.prototype.walk = function (sourceFile) {
        var _this = this;
        var cb = function (node) {
            if (node.kind === ts.SyntaxKind.CallExpression) {
                _this.visitCallExpression(node);
            }
            return ts.forEachChild(node, cb);
        };
        return ts.forEachChild(sourceFile, cb);
    };
    ExpectLengthWalker.prototype.visitCallExpression = function (node) {
        if (!this.isInTestFile) {
            return;
        }
        var memberExpressionCalled = node.expression.getChildCount() === 3 &&
            node.expression.getChildAt(0).kind === ts.SyntaxKind.Identifier;
        if (memberExpressionCalled) {
            var callee = node.expression.getChildAt(0);
            var methodName = node.expression.getChildAt(2).getText();
            var iteratingMethod = Rule.ITERATOR_METHODS.indexOf(methodName) >= 0;
            if (iteratingMethod && !this.isLengthExpectedFor(callee)) {
                this.addFailureAt(callee.getStart(), callee.getText().length, Rule.FAILURE_STRING);
            }
        }
    };
    ExpectLengthWalker.prototype.isLengthExpectedFor = function (callee) {
        return some(this.usages.values(), function (value) {
            return value.uses.some(function (use) {
                var usage = use.location.parent.parent.getText();
                return usage === "expect(" + callee.getText() + ".length)";
            });
        });
    };
    return ExpectLengthWalker;
}(Lint.AbstractWalker));
